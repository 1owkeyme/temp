import uuid
from contextlib import nullcontext as does_not_raise

import pytest

from edm.domain import errors, events, value_objects

mark_as_created_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        False,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.CREATED,
        False,
        [events.PackageCreated(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark created from DRAFT not for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        True,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.CREATED,
        False,
        [events.PackageCreated(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark created from DRAFT for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        False,
        [],
        id="Mark created from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        False,
        [],
        id="Mark created from QUEUED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        False,
        [],
        id="Mark created from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        False,
        [],
        id="Mark created from SIGNED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [],
        id="Mark created from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        False,
        value_objects.FailureStatus.Failure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        False,
        [],
        id="Mark created from DRAFT with Failure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        True,
        value_objects.FailureStatus.CriticalFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        True,
        [],
        id="Mark created from DRAFT with CriticalFailure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        False,
        value_objects.FailureStatus.Expired,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        True,
        [],
        id="Mark created from DRAFT with Expired status",
    ),
]


mark_as_queued_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        False,
        [],
        id="Mark queued from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        False,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.QUEUED,
        False,
        [events.PackageQueued(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark queued from CREATED not for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        True,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.QUEUED,
        False,
        [events.PackageQueued(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark queued from CREATED for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        False,
        [],
        id="Mark queued from QUEUED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        False,
        [],
        id="Mark queued from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        False,
        [],
        id="Mark queued from SIGNED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [],
        id="Mark queued from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        False,
        value_objects.FailureStatus.Failure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        False,
        [],
        id="Mark queued from CREATED with Failure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        True,
        value_objects.FailureStatus.CriticalFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        True,
        [],
        id="Mark queued from CREATED with CriticalFailure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        False,
        value_objects.FailureStatus.Expired,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        True,
        [],
        id="Mark queued from CREATED with Expired status",
    ),
]

mark_as_sent_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        False,
        [],
        id="Mark sent from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        False,
        [],
        id="Mark sent from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        False,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.SENT,
        True,
        [],
        id="Mark sent from QUEUED not for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        True,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.SENT,
        False,
        [],
        id="Mark sent from QUEUED for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        True,
        [],
        id="Mark sent from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        False,
        [],
        id="Mark sent from SIGNED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [],
        id="Mark sent from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        False,
        value_objects.FailureStatus.Failure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        False,
        [],
        id="Mark sent from QUEUED with Failure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        True,
        value_objects.FailureStatus.CriticalFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        True,
        [],
        id="Mark sent from QUEUED with CriticalFailure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        False,
        value_objects.FailureStatus.Expired,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        True,
        [],
        id="Mark sent from QUEUED with Expired status",
    ),
]


mark_as_signed_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        False,
        [],
        id="Mark signed from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        False,
        [],
        id="Mark signed from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        False,
        [],
        id="Mark signed from QUEUED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.SIGNED,
        False,
        [events.PackageSigned(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark signed from SENT for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        False,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition, match="Package is not for sign"),
        value_objects.PackageStatus.SENT,
        True,
        [],
        id="Mark signed from SENT not for sign  - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        False,
        [],
        id="Mark signed from SIGNED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [],
        id="Mark signed from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.Failure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        False,
        [],
        id="Mark signed from SENT with Failure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.CriticalFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        True,
        [],
        id="Mark signed from SENT with CriticalFailure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.Expired,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        True,
        [],
        id="Mark signed from SENT with Expired status",
    ),
]

mark_as_signed_downloaded_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        False,
        [],
        id="Mark signed_downloaded from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        False,
        [],
        id="Mark signed_downloaded from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        False,
        [],
        id="Mark signed_downloaded from QUEUED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        False,
        [],
        id="Mark signed_downloaded from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [events.PackageSignedDownloaded(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark signed_downloaded from SIGNED for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        False,
        value_objects.FailureStatus.NoFailure,
        does_not_raise(),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [events.PackageSignedDownloaded(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Mark signed_downloaded from SIGNED not for sign",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        value_objects.FailureStatus.NoFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        True,
        [],
        id="Mark signed_downloaded from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.Failure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        False,
        [],
        id="Mark signed_downloaded from SIGNED with Failure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.CriticalFailure,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        True,
        [],
        id="Mark signed_downloaded from SIGNED with CriticalFailure status",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        True,
        value_objects.FailureStatus.Expired,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        True,
        [],
        id="Mark signed_downloaded from SIGNED with Expired status",
    ),
]

mark_as_failed_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        "good enough reason",
        True,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        [
            events.PackageProcessingFailed(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a")),
        ],
        id="Mark failed and should try again",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        "good enough reason",
        False,
        value_objects.FailureStatus.CriticalFailure,
        "good enough reason",
        True,
        [],
        id="Mark failed and should not try again",
    ),
]

recover_to_queued_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from DRAFT - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from DRAFT - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from CREATED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from CREATED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        does_not_raise(),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        [events.PackageQueued(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Recover to signed from QUEUED",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from QUEUED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from QUEUED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SENT - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SENT - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from SIGNED- invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SIGNED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SIGNED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - expired",
    ),
]


recover_to_signed_cases = [
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from DRAFT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from DRAFT - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.DRAFT,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from DRAFT - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from CREATED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from CREATED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.CREATED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from CREATED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from QUEUED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from QUEUED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.QUEUED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from QUEUED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from SENT - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SENT - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SENT,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SENT - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        does_not_raise(),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        [events.PackageSigned(package_id=uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"))],
        id="Recover to signed from SIGNED",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SIGNED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SIGNED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SIGNED - expired",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        False,
        pytest.raises(errors.InvalidTransition),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Failure,
        "good enough reason",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - invalid transition",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        False,
        pytest.raises(errors.InvalidTransition, match="Package does not require recovery"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - invalid transition - no recovery needed",
    ),
    pytest.param(
        uuid.uuid5(namespace=uuid.NAMESPACE_DNS, name="a"),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.NoFailure,
        "",
        True,
        pytest.raises(errors.AggregateExpired),
        value_objects.PackageStatus.SIGNED_DOWNLOADED,
        value_objects.FailureStatus.Expired,
        "Expired",
        [],
        id="Recover to signed from SIGNED_DOWNLOADED - expired",
    ),
]
